# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import re

import db_agent
from db_agent import write_file
from typing import Any, List, Dict, Set
import parse
from description import UiDescribeDialog
from create_dialog import UiCreateDialog, CustomDialog, Connection

object_property_template = {
    "type": "rdf:type",
    "range": "rdfs:range",
    "domain": "rdfs:domain",
    "ObjectProperty": "owl:ObjectProperty",
}

class_template = {
    "type": "rdf:type",
    "subClassOf": "rdfs:subClassOf",
    "Class": "owl:Class",
    "domain": "rdfs:domain",
    "range": "rdfs:range"
}


instance_template = {
    "type": "rdf:type",
    "NamedIndividual": "owl:NamedIndividual",
}


data_property_template = {
    "type": "rdf:type",
    "range": "rdfs:range",
    "domain": "rdfs:domain",
    "DatatypeProperty": "owl:DatatypeProperty",
    "decimal": "xsd:decimal",
    "int": "xsd:int",
    "string": "xsd:string",
}


from PyQt5 import QtCore, QtGui, QtWidgets


def append_item(table: QtWidgets.QTableWidget, column, value):
    row_count = table.rowCount()
    table.setRowCount(row_count + 1)
    item = QtWidgets.QTableWidgetItem()
    item.setText(str(row_count + 1))
    table.setVerticalHeaderItem(row_count, item)

    item = QtWidgets.QTableWidgetItem()
    item.setTextAlignment(QtCore.Qt.AlignLeft)
    item.setText(str(value))
    table.setItem(row_count, column, item)


def append_items_row(table: QtWidgets.QTableWidget, values_row):
    row_count = table.rowCount()
    table.setRowCount(row_count + 1)
    item = QtWidgets.QTableWidgetItem()
    item.setText(str(row_count + 1))
    table.setVerticalHeaderItem(row_count, item)

    for i in range(len(values_row)):
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeft)
        item.setText(str(values_row[i]))
        table.setItem(row_count, i, item)


def rewrite_table(table: QtWidgets.QTableWidget, list_of_value_rows):
    for i in range(table.rowCount()):
        table.removeRow(0)
    rows_amount = len(list_of_value_rows)
    table.setRowCount(rows_amount)
    for i in range(len(list_of_value_rows)):
        item = QtWidgets.QTableWidgetItem()
        item.setText(str(i + 1))
        table.setVerticalHeaderItem(i, item)
        for j in range(len(list_of_value_rows[i])):
            item = QtWidgets.QTableWidgetItem()
            item.setTextAlignment(QtCore.Qt.AlignLeft)
            item.setText(str(list_of_value_rows[i][j]))
            table.setItem(i, j, item)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1080, 720)
        MainWindow.setMinimumSize(QtCore.QSize(1080, 720))
        MainWindow.setStyleSheet("background-color: rgb(232, 248, 255);")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")

        self.createButton = QtWidgets.QPushButton(self.centralwidget)
        self.createButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.createButton.setObjectName("createButton")
        self.gridLayout.addWidget(self.createButton, 0, 0, 1, 1)

        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 0, 2, 1, 2)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 1, 2, 1, 2)


        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")


        self.classTab = QtWidgets.QWidget()
        self.classTab.setObjectName("classTab")
        self.classLayout = QtWidgets.QGridLayout(self.classTab)
        self.classLayout.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.classLayout.setObjectName("classLayout")

        self.classTable = QtWidgets.QTableWidget(self.classTab)
        self.classTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.classTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.classTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.classTable.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.classTable.setCornerButtonEnabled(True)
        self.classTable.setObjectName("classTable")
        self.classTable.setColumnCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.classTable.setHorizontalHeaderItem(0, item)

        policy = QtWidgets.QSizePolicy()
        policy.setHorizontalStretch(0)
        policy.setVerticalStretch(0)
        policy.setVerticalPolicy(QtWidgets.QSizePolicy.Policy.Expanding)
        policy.setHorizontalPolicy(QtWidgets.QSizePolicy.Policy.Expanding)
        self.classTable.setSizePolicy(policy)

        self.classTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.classTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)

        self.classLayout.addWidget(self.classTable, 0, 0, 1, 1)


        self.tabWidget.addTab(self.classTab, "")


        self.subclassTab = QtWidgets.QWidget()
        self.subclassTab.setObjectName("subclassTab")

        self.subclassLayout = QtWidgets.QGridLayout(self.subclassTab)
        self.subclassLayout.setObjectName("subclassLayout")

        self.subclassTable = QtWidgets.QTableWidget(self.subclassTab)
        self.subclassTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.subclassTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.subclassTable.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.subclassTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)

        self.subclassTable.setCornerButtonEnabled(True)
        self.subclassTable.setObjectName("subclassTable")
        self.subclassTable.setColumnCount(2)
        item = QtWidgets.QTableWidgetItem()
        self.subclassTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.subclassTable.setHorizontalHeaderItem(1, item)

        policy = QtWidgets.QSizePolicy()
        policy.setHorizontalStretch(0)
        policy.setVerticalStretch(0)
        policy.setVerticalPolicy(QtWidgets.QSizePolicy.Policy.Expanding)
        policy.setHorizontalPolicy(QtWidgets.QSizePolicy.Policy.Expanding)
        self.subclassTable.setSizePolicy(policy)
        self.subclassTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.subclassTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)

        self.subclassLayout.addWidget(self.subclassTable, 0, 0, 1, 1)

        self.tabWidget.addTab(self.subclassTab, "")


        self.individualTab = QtWidgets.QWidget()
        self.individualTab.setObjectName("individualTab")

        self.individualLayout = QtWidgets.QGridLayout(self.individualTab)
        self.individualLayout.setObjectName("individualLayout")

        self.individualTable = QtWidgets.QTableWidget(self.individualTab)
        self.individualTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.individualTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.individualTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.individualTable.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.individualTable.setCornerButtonEnabled(True)
        self.individualTable.setObjectName("individualTable")
        self.individualTable.setColumnCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.individualTable.setHorizontalHeaderItem(0, item)
        self.individualTable.horizontalHeader().setStretchLastSection(True)
        self.individualTable.verticalHeader().setStretchLastSection(False)
        self.individualTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.individualTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.individualLayout.addWidget(self.individualTable, 0, 0, 1, 1)

        self.tabWidget.addTab(self.individualTab, "")


        self.objectPropertyTab = QtWidgets.QWidget()
        self.objectPropertyTab.setObjectName("objectPropertyTab")

        self.objectPropertyLayout = QtWidgets.QGridLayout(self.objectPropertyTab)
        self.objectPropertyLayout.setObjectName("objectPropertyLayout")

        self.objectPropertyTable = QtWidgets.QTableWidget(self.objectPropertyTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.objectPropertyTable.sizePolicy().hasHeightForWidth())
        self.objectPropertyTable.setSizePolicy(sizePolicy)
        self.objectPropertyTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.objectPropertyTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.objectPropertyTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.objectPropertyTable.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.objectPropertyTable.setCornerButtonEnabled(True)
        self.objectPropertyTable.setObjectName("objectPropertyTable")
        self.objectPropertyTable.setColumnCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.objectPropertyTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.objectPropertyTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.objectPropertyTable.setHorizontalHeaderItem(2, item)
        self.objectPropertyTable.horizontalHeader().setCascadingSectionResizes(False)
        self.objectPropertyTable.horizontalHeader().setStretchLastSection(True)
        self.objectPropertyTable.verticalHeader().setCascadingSectionResizes(False)
        self.objectPropertyTable.verticalHeader().setStretchLastSection(False)
        self.objectPropertyTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.objectPropertyTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.objectPropertyLayout.addWidget(self.objectPropertyTable, 0, 0, 1, 1)

        self.tabWidget.addTab(self.objectPropertyTab, "")


        self.dataPropertyTab = QtWidgets.QWidget()
        self.dataPropertyTab.setObjectName("dataPropertyTab")

        self.dataPropertyLayout = QtWidgets.QGridLayout(self.dataPropertyTab)
        self.dataPropertyLayout.setObjectName("dataPropertyLayout")

        self.dataPropertyTable = QtWidgets.QTableWidget(self.dataPropertyTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dataPropertyTable.sizePolicy().hasHeightForWidth())
        self.dataPropertyTable.setSizePolicy(sizePolicy)
        self.dataPropertyTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.dataPropertyTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.dataPropertyTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.dataPropertyTable.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.dataPropertyTable.setCornerButtonEnabled(True)
        self.dataPropertyTable.setObjectName("dataPropertyTable")
        self.dataPropertyTable.setColumnCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.dataPropertyTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.dataPropertyTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.dataPropertyTable.setHorizontalHeaderItem(2, item)
        self.dataPropertyTable.horizontalHeader().setCascadingSectionResizes(False)
        self.dataPropertyTable.horizontalHeader().setStretchLastSection(True)
        self.dataPropertyTable.verticalHeader().setCascadingSectionResizes(False)
        self.dataPropertyTable.verticalHeader().setStretchLastSection(False)
        self.dataPropertyTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.dataPropertyTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.dataPropertyLayout.addWidget(self.dataPropertyTable, 0, 0, 1, 1)

        self.tabWidget.addTab(self.dataPropertyTab, "")


        self.queryTab = QtWidgets.QWidget()
        self.queryTab.setObjectName("queryTab")

        self.queryLayout = QtWidgets.QGridLayout(self.queryTab)
        self.queryLayout.setObjectName("queryLayout")

        self.queryEdit = QtWidgets.QTextEdit(self.queryTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.queryEdit.sizePolicy().hasHeightForWidth())
        self.queryEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.queryEdit.setFont(font)
        self.queryEdit.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.queryEdit.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.queryEdit.setDocumentTitle("")
        self.queryEdit.setCursorWidth(1)
        self.queryEdit.setObjectName("queryEdit")
        self.queryLayout.addWidget(self.queryEdit, 2, 0, 1, 3)

        self.executeButton = QtWidgets.QPushButton(self.queryTab)
        self.executeButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.executeButton.setObjectName("executeButton")
        self.queryLayout.addWidget(self.executeButton, 3, 0, 1, 1)

        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.queryLayout.addItem(spacerItem2, 3, 1, 1, 2)

        self.queryTable = QtWidgets.QTableWidget(self.queryTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.queryTable.sizePolicy().hasHeightForWidth())
        self.queryTable.setSizePolicy(sizePolicy)
        self.queryTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.queryTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.queryTable.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.queryTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.queryTable.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.queryTable.setCornerButtonEnabled(True)
        self.queryTable.setObjectName("queryTable")
        self.queryTable.setColumnCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.queryTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.queryTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.queryTable.setHorizontalHeaderItem(2, item)
        self.queryTable.horizontalHeader().setCascadingSectionResizes(False)
        self.queryTable.verticalHeader().setCascadingSectionResizes(False)
        self.queryTable.verticalHeader().setStretchLastSection(False)
        self.queryTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.queryTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.queryLayout.addWidget(self.queryTable, 1, 0, 1, 3)


        self.tabWidget.addTab(self.queryTab, "")

        self.gridLayout.addWidget(self.tabWidget, 4, 0, 1, 4)


        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem3, 2, 2, 1, 2)

        self.deleteButton = QtWidgets.QPushButton(self.centralwidget)
        self.deleteButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.deleteButton.setObjectName("deleteButton")
        self.gridLayout.addWidget(self.deleteButton, 0, 1, 1, 1)

        self.propertyButton = QtWidgets.QPushButton(self.centralwidget)
        self.propertyButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.propertyButton.setObjectName("propertyButton")
        self.gridLayout.addWidget(self.propertyButton, 1, 0, 1, 1)

        self.describeButton = QtWidgets.QPushButton(self.centralwidget)
        self.describeButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.describeButton.setObjectName("describeButton")
        self.gridLayout.addWidget(self.describeButton, 1, 1, 1, 1)

        self.removeForIndividualButton = QtWidgets.QPushButton(self.centralwidget)
        self.removeForIndividualButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.removeForIndividualButton.setObjectName("removeForIndividualButton")
        self.gridLayout.addWidget(self.removeForIndividualButton, 1, 0, 1, 1)

        self.loadOntologyButton = QtWidgets.QPushButton(self.centralwidget)
        self.loadOntologyButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.loadOntologyButton.setObjectName("loadOntologyButton")
        self.gridLayout.addWidget(self.loadOntologyButton, 5, 1, 1, 1)

        self.deleteEverythingButton = QtWidgets.QPushButton(self.centralwidget)
        self.deleteEverythingButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.deleteEverythingButton.setObjectName("deleteEverythingButton")
        self.gridLayout.addWidget(self.deleteEverythingButton, 5, 2, 1, 1)

        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.last_name = None
        self.connect_all()

        self.tabWidget.setCurrentIndex(0)
        self.tab_changed()

    def prepare_class_tab(self):
        self.createButton.setVisible(True)
        self.createButton.setEnabled(True)

        self.deleteButton.setVisible(True)
        self.deleteButton.setEnabled(True)

        self.propertyButton.setEnabled(False)
        self.propertyButton.setVisible(False)

        self.describeButton.setEnabled(False)
        self.describeButton.setVisible(False)

        self.removeForIndividualButton.setEnabled(False)
        self.removeForIndividualButton.setVisible(False)

    def prepare_subclass_tab(self):
        self.createButton.setVisible(True)
        self.createButton.setEnabled(True)

        self.deleteButton.setVisible(False)
        self.deleteButton.setEnabled(False)

        self.propertyButton.setEnabled(False)
        self.propertyButton.setVisible(False)

        self.describeButton.setEnabled(False)
        self.describeButton.setVisible(False)

        self.removeForIndividualButton.setEnabled(False)
        self.removeForIndividualButton.setVisible(False)

    def prepare_individual_tab(self):
        self.createButton.setVisible(True)
        self.createButton.setEnabled(True)

        self.deleteButton.setVisible(True)
        self.deleteButton.setEnabled(True)

        self.propertyButton.setEnabled(True)
        self.propertyButton.setVisible(True)

        self.describeButton.setEnabled(True)
        self.describeButton.setVisible(True)

        self.removeForIndividualButton.setEnabled(False)
        self.removeForIndividualButton.setVisible(False)

    def prepare_object_property_tab(self):
        self.createButton.setVisible(True)
        self.createButton.setEnabled(True)

        self.deleteButton.setVisible(True)
        self.deleteButton.setEnabled(True)

        self.propertyButton.setEnabled(False)
        self.propertyButton.setVisible(False)

        self.describeButton.setEnabled(False)
        self.describeButton.setVisible(False)

        self.removeForIndividualButton.setEnabled(True)
        self.removeForIndividualButton.setVisible(True)

    def prepare_data_property_tab(self):
        self.createButton.setVisible(True)
        self.createButton.setEnabled(True)

        self.deleteButton.setVisible(True)
        self.deleteButton.setEnabled(True)

        self.propertyButton.setEnabled(False)
        self.propertyButton.setVisible(False)

        self.describeButton.setEnabled(False)
        self.describeButton.setVisible(False)

        self.removeForIndividualButton.setEnabled(True)
        self.removeForIndividualButton.setVisible(True)

    def prepare_query_tab(self):
        self.createButton.setVisible(False)
        self.createButton.setEnabled(False)

        self.deleteButton.setVisible(False)
        self.deleteButton.setEnabled(False)

        self.propertyButton.setEnabled(False)
        self.propertyButton.setVisible(False)

        self.describeButton.setEnabled(False)
        self.describeButton.setVisible(False)

        self.removeForIndividualButton.setEnabled(False)
        self.removeForIndividualButton.setVisible(False)

    def tab_changed(self):
        if self.tabWidget.currentIndex() == 0:
            self.prepare_class_tab()
        elif self.tabWidget.currentIndex() == 1:
            self.prepare_subclass_tab()
        elif self.tabWidget.currentIndex() == 2:
            self.prepare_individual_tab()
        elif self.tabWidget.currentIndex() == 3:
            self.prepare_object_property_tab()
        elif self.tabWidget.currentIndex() == 4:
            self.prepare_data_property_tab()
        elif self.tabWidget.currentIndex() == 5:
            self.prepare_query_tab()

    def show_warning_box(self, message):
        warning_box = QtWidgets.QMessageBox(parent=MainWindow)
        warning_box.setIcon(QtWidgets.QMessageBox.Icon.Warning)
        warning_box.setTitle("Warning!")
        warning_box.setText(message)
        warning_box.show()

    def update_data_class(self):
        content = []
        query_result = db_agent.execute_get_query(relation="rdf:type", object="owl:Class")
        for item in query_result:
            content.append(item["subject"].split("/")[-1][:-1])

        return content

    def update_subclasses(self):
        content = []

        query_result = db_agent.execute_get_query(relation="rdfs:subClassOf")

        for item in query_result:
            content.append([item["object"].split("/")[-1][:-1],
                            item["subject"].split("/")[-1][:-1]])

        return content

    def update_data_individual(self):
        content = []
        query_result = db_agent.execute_get_individuals_query()
        for item in query_result:
            content.append(item["subject"].split("/")[-1][:-1])

        return content

    def handle_data_in_dict_output(self, data: List[Dict[Any, Any]]):
        content = []
        for i in data:
            content.append([i.get('subject'),
                            i.get('relation'),
                            i.get('object')])

        return content

    def update_data_object_property(self):
        content = []

        query_result = db_agent.execute_get_query(
            relation="rdf:type", object="owl:ObjectProperty"
        )
        for item in query_result:
            dict_item = {}
            for i in db_agent.execute_get_query():
                if i["subject"].split("/")[-1][:-1] == item["subject"].split("/")[-1][:-1]:
                    if i["relation"].split("#")[1][:-1] == 'type':
                        dict_item['subject'] = item["subject"].split("/")[-1][:-1]
                    elif i["relation"].split("#")[1][:-1] == 'domain':
                        dict_item['relation'] = i["object"].split("/")[-1][:-1]
                    else:
                        dict_item['object'] = i["object"].split("/")[-1][:-1]
            content.append(dict_item.copy())
            dict_item.clear()

        return self.handle_data_in_dict_output(content)

    def update_data_property(self):
        content = []

        query_result = db_agent.execute_get_query(
            relation="rdf:type", object="owl:DatatypeProperty"
        )
        for item in query_result:
            dict_item = {}
            for i in db_agent.execute_get_query():
                if i["subject"].split("/")[-1][:-1] == item["subject"].split("/")[-1][:-1]:
                    if i["relation"].split("#")[1][:-1] == 'type':
                        dict_item['subject'] = item["subject"].split("/")[-1][:-1]
                    elif i["relation"].split("#")[1][:-1] == 'domain':
                        dict_item['relation'] = i["object"].split("/")[-1][:-1]
                    else:
                        dict_item['object'] = 'xsd:' + i["object"].split("#")[1][:-1]
            content.append(dict_item.copy())
            dict_item.clear()

        return self.handle_data_in_dict_output(content)

    def update_data(self, index):
        if index == 0:
            return [[i] for i in self.update_data_class()]
        elif index == 1:
            return self.update_subclasses()
        elif index == 2:
            return [[i] for i in self.update_data_individual()]
        elif index == 3:
            return self.update_data_object_property()
        elif index == 4:
            return self.update_data_property()

    def refresh_tables(self):
        for i in range(self.tabWidget.count()):
            if i == 5:
                continue
            data = self.update_data(i)
            if not data:
                data = []
            if i == 0:
                rewrite_table(self.classTable, data)
            elif i == 1:
                rewrite_table(self.subclassTable, data)
            elif i == 2:
                rewrite_table(self.individualTable, data)
            elif i == 3:
                rewrite_table(self.objectPropertyTable, data)
            elif i == 4:
                rewrite_table(self.dataPropertyTable, data)

    def load_ontology_clicked(self):
        filename, ok = QtWidgets.QFileDialog.getOpenFileName(
            MainWindow,
            "импортировать файл",
            "/home/vodohleb",
            "Text files (*.owl *.rdf)",
        )
        if filename:
            write_file(filename)
            self.refresh_tables()

    def create(self, data: Dict[str, str]):
        try:
            if self.tabWidget.currentIndex() == 0:
                self.create_class(data)
            elif self.tabWidget.currentIndex() == 1:
                return self.create_subclass(data)
            elif self.tabWidget.currentIndex() == 2:
                self.create_individual(data)
            elif self.tabWidget.currentIndex() == 3:
                self.create_object_property(data)
            elif self.tabWidget.currentIndex() == 4:
                self.create_data_property(data)
        except Exception:
            self.show_warning_box("Check input args, maybe some of them are empty.")

    def create_form_window(self):
        connection = None
        if self.tabWidget.currentIndex() == 0:
            connection = Connection.CREATE_CLASS
        elif self.tabWidget.currentIndex() == 1:
            connection = Connection.CREATE_SUBCLASS
        elif self.tabWidget.currentIndex() == 2:
            connection = Connection.CREATE_INDIVIDUAL
        elif self.tabWidget.currentIndex() == 3:
            connection = Connection.CREATE_OBJECT_PROPERTY
        elif self.tabWidget.currentIndex() == 4:
            connection = Connection.CREATE_DATA_PROPERTY

        Dialog = CustomDialog(parent=MainWindow)
        ui = UiCreateDialog()
        ui.setupUi(Dialog, connection)
        Dialog.formDoneSignal.connect(self.create)
        Dialog.show()

    def create_class(self, data: Dict[str, str]):
        validation = parse.validate_input({
            'Class': data['classname'],
        })
        if validation['Class']:
            return
        db_agent.execute_post_query(f"<{data['classname']}>", "rdf:type", "owl:Class")
        self.refresh_tables()

    def create_subclass(self, data: Dict[str, str]):
        parent_class = parse.check_class_existing(data['parent'])
        child_class = parse.check_class_existing(data['classname'])
        if not parent_class:
            self.show_warning_box("Each parent class doesn't exist.")
            return
        if not child_class:
            db_agent.execute_post_query(f"<{data['classname']}>", "rdf:type", "owl:Class")
        else:
            self.delete_class(data['classname'])
            db_agent.execute_post_query(f"<{data['classname']}>", "rdf:type", "owl:Class")
        if db_agent.execute_post_query(f"<{data['classname']}>", "rdfs:subClassOf", f"<{data['parent']}>"):
            self.refresh_tables()

    def create_individual(self, data: Dict[str, str]):
        validation = parse.validate_input({
            'NamedIndividual': data['instance_name'],
            'Class': data['instance_type']
        })
        if validation['NamedIndividual'] or not validation['Class']:
            self.show_warning_box("Check input args.")
            return
        if db_agent.execute_post_query(
            f"<{data['instance_name']}>", "rdf:type", "owl:NamedIndividual"
        ):
            db_agent.execute_post_query(
                f"<{data['instance_name']}>", "rdf:type", f"<{data['instance_type']}>"
            )
            self.refresh_tables()

    def create_object_property(self, data: Dict[str, str]):
        validation = parse.validate_input({
            'ObjectProperty': data['object_property'],
        })
        if validation['ObjectProperty']:
            self.show_warning_box("Check input args.")
            return
        if not parse.check_class_existing(data['domain_1']) or not parse.check_class_existing(data['domain_2']):
            self.show_warning_box("Such class doesn't exist.")
            return
        if (
            db_agent.execute_post_query(
                f"<{data['object_property']}>", "rdf:type", "owl:ObjectProperty"
            )
            and db_agent.execute_post_query(
                f"<{data['object_property']}>", "rdfs:domain", f"<{data['domain_1']}>"
            )
            and db_agent.execute_post_query(
                f"<{data['object_property']}>", "rdfs:range", f"<{data['domain_2']}>"
            )
        ):
            self.refresh_tables()

    def create_data_property(self, data: Dict[str, str]):
        allows_range = ["xsd:decimal", "xsd:int", "xsd:string"]
        if data['xs_range'] not in allows_range:
            self.show_warning_box("Check input args.")
            return
        validation = parse.validate_input({
            'DatatypeProperty': data['data_property'],
            'Class': data['domain']
        })
        if not validation['Class']:
            self.show_warning_box("Check input args.")
            return
        if validation['DatatypeProperty']:
            self.show_warning_box("Check input args.")
            return
        if (
            db_agent.execute_post_query(
                f"<{data['data_property']}>", "rdf:type", "owl:DatatypeProperty"
            )
            and db_agent.execute_post_query(
                f"<{data['data_property']}>", "rdfs:domain", f"<{data['domain']}>"
            )
            and db_agent.execute_post_query(
                f"<{data['data_property']}>", "rdfs:range", f"{data['xs_range']}"
            )
        ):
            self.refresh_tables()

    def save_last_name(self):
        if self.tabWidget.currentIndex() == 0:
            self.last_name = {
                "last_name": self.classTable.currentItem().text(),
                "row": self.classTable.currentItem().row(),
                "column": self.classTable.currentItem().column(),
                "tab_index": self.tabWidget.currentIndex()
            }
        elif self.tabWidget.currentIndex() == 2:
            self.last_name = {
                "last_name": self.individualTable.currentItem().text(),
                "row": self.individualTable.currentItem().row(),
                "column": self.individualTable.currentItem().column(),
                "tab_index": self.tabWidget.currentIndex()
            }
        elif self.tabWidget.currentIndex() == 3:
            self.last_name = {
                "last_name": self.objectPropertyTable.currentItem().text(),
                "row": self.objectPropertyTable.currentItem().row(),
                "column": self.objectPropertyTable.currentItem().column(),
                "tab_index": self.tabWidget.currentIndex()
            }
        elif self.tabWidget.currentIndex() == 4:
            self.last_name = {
                "last_name": self.dataPropertyTable.currentItem().text(),
                "row": self.dataPropertyTable.currentItem().row(),
                "column": self.dataPropertyTable.currentItem().column(),
                "tab_index": self.tabWidget.currentIndex()
            }

    def connect_save_last_name(self):
        self.classTable.itemDoubleClicked.connect(self.save_last_name)
        self.individualTable.itemDoubleClicked.connect(self.save_last_name)
        self.objectPropertyTable.itemDoubleClicked.connect(self.save_last_name)
        self.dataPropertyTable.itemDoubleClicked.connect(self.save_last_name)

    def rename(self):
        if self.last_name is not None:
            if self.last_name["tab_index"] == 0:
                db_agent.rename_subject_object(
                    old_name=self.last_name["last_name"],
                    new_name=self.classTable.item(self.last_name["row"], self.last_name["column"]).text()
                )
            elif self.last_name["tab_index"] == 2:
                db_agent.rename_subject_object(
                    old_name=self.last_name["last_name"],
                    new_name=self.individualTable.item(self.last_name["row"], self.last_name["column"]).text()
                )
            elif self.last_name["tab_index"] == 3:
                if self.last_name["column"] == 0:
                    db_agent.rename_relation(
                        old_name=self.last_name["last_name"],
                        new_name=self.objectPropertyTable.item(self.last_name["row"], self.last_name["column"]).text()
                    )
                else:
                    self.objectPropertyTable.item(
                        self.last_name["row"], self.last_name["column"]
                    ).setText(self.last_name["last_name"])
            elif self.last_name["tab_index"] == 4:
                if self.last_name["column"] == 0:
                    db_agent.rename_relation(
                        old_name=self.last_name["last_name"],
                        new_name=self.dataPropertyTable.item(self.last_name["row"], self.last_name["column"]).text()
                    )
                else:
                    self.dataPropertyTable.item(
                        self.last_name["row"], self.last_name["column"]
                    ).setText(self.last_name["last_name"])
            self.last_name = None
            self.refresh_tables()

    def rename_connection(self):
        self.tabWidget.currentChanged.connect(self.rename)
        self.classTable.itemSelectionChanged.connect(self.rename)
        self.individualTable.itemSelectionChanged.connect(self.rename)
        self.objectPropertyTable.itemSelectionChanged.connect(self.rename)
        self.dataPropertyTable.itemSelectionChanged.connect(self.rename)

    def connect_all(self):
        self.tabWidget.currentChanged.connect(self.tab_changed)
        self.loadOntologyButton.clicked.connect(self.load_ontology_clicked)
        self.connect_save_last_name()
        self.rename_connection()
        self.describeButton.clicked.connect(self.describe)
        self.createButton.clicked.connect(self.create_form_window)
        self.deleteButton.clicked.connect(self.delete)

    def get_individual_info(self, individual: str):
        content = []
        validation = parse.validate_input({
            'NamedIndividual': individual,
        })
        if not validation['NamedIndividual']:
            return content

        query_result = db_agent.execute_get_individuals_query(name=individual)
        for item in query_result:
            subject = item["subject"].split("/")[-1][:-1]
            item_dict = {
                'subject': subject,
            }
            relation = item["relation"].split("/")[-1][:-1]
            if len(item["object"].split("^^")) == 2:
                try:
                    object = float(item["object"].split("^^")[0][1:-1])
                except Exception:
                    object = item["object"].split("^^")[0]
                item_dict.update({
                    'relation': relation,
                    'object': object
                })
            else:
                object = item["object"].split("/")[-1][:-1]
                item_dict.update({
                    'relation': relation,
                    'object': object
                })
            content.append(item_dict)

        individual_class = None
        for i in db_agent.execute_get_query():
            try:
                if i["subject"].split("/")[-1][:-1] == individual and \
                   not i["object"].split("/")[-1][:-1].startswith('owl') and \
                   i["relation"].split("#")[1][:-1] == 'type':
                    individual_class = i["object"].split("/")[-1][:-1]
                    break
            except IndexError:
                pass
        content.append({
            'subject': individual,
            'relation': 'type',
            'object': individual_class
        })

        return self.handle_data_in_dict_output(content)

    def find_individual(self, individuals_name: List[str]):
        data = []
        for i in individuals_name:
            data.extend(self.get_individual_info(i))
        Dialog = QtWidgets.QDialog(parent=MainWindow)
        ui = UiDescribeDialog()
        ui.setupUi(Dialog, data)
        Dialog.show()

    def describe(self):
        selected_cells = self.individualTable.selectedItems()
        data: List[str] = [item.text() for item in selected_cells]  # type: ignore
        self.find_individual(data)

    def delete(self):
        if self.tabWidget.currentIndex() == 0:
            data: List[str] = [i.text() for i in self.classTable.selectedItems()]
            for i in data:
                self.delete_class(i)
        elif self.tabWidget.currentIndex() == 2:
            data: List[str] = [i.text() for i in self.individualTable.selectedItems()]
            for i in data:
                self.delete_instance(i)
        elif self.tabWidget.currentIndex() == 3:
            data = []
            for i in self.objectPropertyTable.selectedItems():
                if i.column() == 0:
                    data.append(i.text())
            for i in data:
                self.delete_object_property(i)
        elif self.tabWidget.currentIndex() == 4:
            data = []
            for i in self.dataPropertyTable.selectedItems():
                if i.column() == 0:
                    data.append(i.text())
            for i in data:
                self.delete_data_property(i)
    """
    def delete_individual_property_form(self, tab: ttk.Frame):
        self.delete_form_window = Tk()
        self.delete_form_window.title("Delete Property Form")
        entries = []
        self.delete_form_window.geometry("500x300")
        label = ttk.Label(self.delete_form_window, text="Property Name")
        label.place(relx=0.5, rely=0.1, anchor=CENTER)
        entry = ttk.Entry(self.delete_form_window)
        entry.place(relx=0.5, rely=0.25, anchor=CENTER)
        entries.append(entry)

        label = ttk.Label(self.delete_form_window, text="Individual Name")
        label.place(relx=0.5, rely=0.4, anchor=CENTER)
        entry = ttk.Entry(self.delete_form_window)
        entry.place(relx=0.5, rely=0.55, anchor=CENTER)
        entries.append(entry)

        self.submit_button = ttk.Button(self.delete_form_window, text="Submit",
                                        command=lambda: self.delete_individual_property(tab, entries))
        self.submit_button.place(relx=0.5, rely=0.8, anchor=CENTER)

    def delete_individual_property(self, tab: ttk.Frame, entries: List[ttk.Entry]):
        if tab == self.data_property_tab:
            self.instance_delete_data_property(entries[0].get(), entries[1].get())
        else:
            self.instance_delete_object_property(entries[0].get(), entries[1].get())
        self.delete_form_window.destroy()

    def instance_delete_data_property(self, data_property: str, individual_name: str, hide=False):
        all_info = get_full_info(individual_name, "owl:NamedIndividual")
        if not all_info:
            messagebox.showwarning("Warning", "Such individual doesn't exist.")
            return
        validation = validate_input({
            'DatatypeProperty': data_property,
        })
        if not validation['DatatypeProperty']:
            messagebox.showwarning("Warning", "Check input args.")
            return
        for i in all_info:
            if i["relation"].split("/")[-1][:-1] == data_property:
                db_agent.execute_delete_query(
                    f'<{i["subject"].split("/")[-1][:-1]}>',
                    f'<{i["relation"].split("/")[-1][:-1]}>',
                    f'"{i["object"].split("^^")[0][1:-1]}"^^{data_property_template[i["object"].split("#")[-1][:-1]]}',
                )
        if not hide:
            self.refresh_tables(self.tabs)

    def instance_delete_object_property(self, object_property: str, individual_name: str, hide=False):
        all_info = get_full_info(individual_name, "owl:NamedIndividual")
        if not all_info:
            messagebox.showwarning("Warning", "Such individual doesn't exist.")
            return
        validation = validate_input({
            'ObjectProperty': object_property,
        })
        if not validation['ObjectProperty']:
            messagebox.showwarning("Warning", "Check input args.")
            return
        for i in all_info:
            if i["relation"].split("/")[-1][:-1] == object_property:
                db_agent.execute_delete_query(
                    f'<{i["subject"].split("/")[-1][:-1]}>',
                    f'<{i["relation"].split("/")[-1][:-1]}>',
                    f'<{i["object"].split("/")[-1][:-1]}>',
                )
        if not hide:
            self.refresh_tables(self.tabs)
    """
    def delete_class(self, subject_class: str):
        all_info = parse.get_full_info(subject_class, "owl:Class")
        if not all_info:
            self.show_warning_box("Such class doesn't exist.")
            return
        connected_object: Set[str] = set()
        for i in db_agent.execute_get_query():
            if i["object"].split("/")[-1][:-1] == subject_class:
                connected_object.add(i["subject"].split("/")[-1][:-1])
        for i in connected_object:
            self.delete_instance(i, hide=True)
            self.delete_data_property(i, hide=True)
            self.delete_object_property(i, hide=True)
        db_agent.delete_class_or_individual(subject_class)

        self.refresh_tables()

    def delete_instance(self, instance_name: str, hide=False):
        all_info = parse.get_full_info(instance_name, "owl:NamedIndividual")
        if not all_info:
            if not hide:
                self.show_warning_box("Such instance doesn't exist.")
            return
        db_agent.delete_class_or_individual(instance_name)
        if not hide:
            self.refresh_tables()

    def delete_object_property(self, object_property: str, hide=False):
        all_info = parse.get_full_info(object_property, "owl:ObjectProperty")
        if not all_info:
            if not hide:
                self.show_warning_box("Such property doesn't exist.")
            return
        db_agent.delete_property(object_property)
        if not hide:
            self.refresh_tables()

    def delete_data_property(self, data_property: str, hide=False):
        all_info = parse.get_full_info(data_property, "owl:DatatypeProperty")
        if not all_info:
            if not hide:
                self.show_warning_box("Such property doesn't exist.")
            return
        db_agent.delete_property(data_property)
        if not hide:
            self.refresh_tables()

    def delete_all(self):  # TODO Курва, зброю на землю!!!!
        db_agent.delete_all()
        self.refresh_tables()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Azer"))
        self.createButton.setText(_translate("MainWindow", "Create"))

        item = self.classTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Class"))
        __sortingEnabled = self.classTable.isSortingEnabled()
        self.classTable.setSortingEnabled(False)
        self.classTable.setSortingEnabled(__sortingEnabled)

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.classTab), _translate("MainWindow", "Class"))


        item = self.subclassTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Class"))
        item = self.subclassTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Subclass"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.subclassTab), _translate("MainWindow", "Subclass"))


        item = self.individualTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Individual"))
        __sortingEnabled = self.individualTable.isSortingEnabled()
        self.individualTable.setSortingEnabled(False)
        self.individualTable.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.individualTab), _translate("MainWindow", "Individual"))


        item = self.objectPropertyTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Object property"))
        item = self.objectPropertyTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Domain"))
        item = self.objectPropertyTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Range"))
        __sortingEnabled = self.objectPropertyTable.isSortingEnabled()
        self.objectPropertyTable.setSortingEnabled(False)
        self.objectPropertyTable.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.objectPropertyTab), _translate("MainWindow", "Object property"))


        item = self.dataPropertyTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Data property"))
        item = self.dataPropertyTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Domain"))
        item = self.dataPropertyTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Range"))
        __sortingEnabled = self.dataPropertyTable.isSortingEnabled()
        self.dataPropertyTable.setSortingEnabled(False)
        self.dataPropertyTable.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.dataPropertyTab), _translate("MainWindow", "Data property"))


        self.queryEdit.setPlaceholderText(_translate("MainWindow", "Input your SPARQL query..."))
        self.executeButton.setText(_translate("MainWindow", "Execute"))

        item = self.queryTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Object property"))
        item = self.queryTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Domain"))
        item = self.queryTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Range"))
        __sortingEnabled = self.queryTable.isSortingEnabled()
        self.queryTable.setSortingEnabled(False)
        self.queryTable.setSortingEnabled(__sortingEnabled)


        self.tabWidget.setTabText(self.tabWidget.indexOf(self.queryTab), _translate("MainWindow", "Query"))

        self.deleteButton.setText(_translate("MainWindow", "Delete"))

        self.propertyButton.setText(_translate("MainWindow", "Property"))

        self.describeButton.setText(_translate("MainWindow", "Describe"))

        self.removeForIndividualButton.setText(_translate("MainWindow", "Remove for individual"))

        self.loadOntologyButton.setText(_translate("MainWindow", "Load ontology"))

        self.deleteEverythingButton.setText(_translate("MainWindow", "Delete everything"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
