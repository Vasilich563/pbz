# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import re

import db_agent
from db_agent import write_file
import server

object_property_template = {
    "type": "rdf:type",
    "range": "rdfs:range",
    "domain": "rdfs:domain",
    "ObjectProperty": "owl:ObjectProperty",
}

class_template = {
    "type": "rdf:type",
    "subClassOf": "rdfs:subClassOf",
    "Class": "owl:Class",
    "domain": "rdfs:domain",
    "range": "rdfs:range"
}


instance_template = {
    "type": "rdf:type",
    "NamedIndividual": "owl:NamedIndividual",
}


data_property_template = {
    "type": "rdf:type",
    "range": "rdfs:range",
    "domain": "rdfs:domain",
    "DatatypeProperty": "owl:DatatypeProperty",
    "decimal": "xsd:decimal",
    "int": "xsd:int",
    "string": "xsd:string",
}


from PyQt5 import QtCore, QtGui, QtWidgets


def append_item(table: QtWidgets.QTableWidget, column, value):
    row_count = table.rowCount()
    table.setRowCount(row_count + 1)
    item = QtWidgets.QTableWidgetItem()
    item.setText(str(row_count + 1))
    table.setVerticalHeaderItem(row_count, item)

    item = QtWidgets.QTableWidgetItem()
    item.setTextAlignment(QtCore.Qt.AlignCenter)
    item.setText(str(value))
    table.setItem(row_count, column, item)


def append_items_row(table: QtWidgets.QTableWidget, values_row):
    row_count = table.rowCount()
    table.setRowCount(row_count + 1)
    item = QtWidgets.QTableWidgetItem()
    item.setText(str(row_count + 1))
    table.setVerticalHeaderItem(row_count, item)

    for i in range(len(values_row)):
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText(str(values_row[i]))
        table.setItem(row_count, i, item)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1080, 720)
        MainWindow.setMinimumSize(QtCore.QSize(1080, 720))
        MainWindow.setStyleSheet("background-color: rgb(232, 248, 255);")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")

        self.createButton = QtWidgets.QPushButton(self.centralwidget)
        self.createButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.createButton.setObjectName("createButton")
        self.gridLayout.addWidget(self.createButton, 0, 0, 1, 1)

        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 0, 2, 1, 2)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 1, 2, 1, 2)


        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")


        self.classTab = QtWidgets.QWidget()
        self.classTab.setObjectName("classTab")
        self.classLayout = QtWidgets.QGridLayout(self.classTab)
        self.classLayout.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.classLayout.setObjectName("classLayout")

        self.classTable = QtWidgets.QTableWidget(self.classTab)
        self.classTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.classTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.classTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.classTable.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.classTable.setCornerButtonEnabled(True)
        self.classTable.setObjectName("classTable")
        self.classTable.setColumnCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.classTable.setHorizontalHeaderItem(0, item)

        policy = QtWidgets.QSizePolicy()
        policy.setHorizontalStretch(0)
        policy.setVerticalStretch(0)
        policy.setVerticalPolicy(QtWidgets.QSizePolicy.Policy.Expanding)
        policy.setHorizontalPolicy(QtWidgets.QSizePolicy.Policy.Expanding)
        self.classTable.setSizePolicy(policy)

        self.classTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.classTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)

        self.classLayout.addWidget(self.classTable, 0, 0, 1, 1)


        self.tabWidget.addTab(self.classTab, "")


        self.subclassTab = QtWidgets.QWidget()
        self.subclassTab.setObjectName("subclassTab")

        self.subclassLayout = QtWidgets.QGridLayout(self.subclassTab)
        self.subclassLayout.setObjectName("subclassLayout")

        self.subclassTable = QtWidgets.QTableWidget(self.subclassTab)
        self.subclassTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.subclassTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.subclassTable.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.subclassTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)

        self.subclassTable.setCornerButtonEnabled(True)
        self.subclassTable.setObjectName("subclassTable")
        self.subclassTable.setColumnCount(2)
        item = QtWidgets.QTableWidgetItem()
        self.subclassTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.subclassTable.setHorizontalHeaderItem(1, item)

        policy = QtWidgets.QSizePolicy()
        policy.setHorizontalStretch(0)
        policy.setVerticalStretch(0)
        policy.setVerticalPolicy(QtWidgets.QSizePolicy.Policy.Expanding)
        policy.setHorizontalPolicy(QtWidgets.QSizePolicy.Policy.Expanding)
        self.subclassTable.setSizePolicy(policy)
        self.subclassTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.subclassTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)

        self.subclassLayout.addWidget(self.subclassTable, 0, 0, 1, 1)

        self.tabWidget.addTab(self.subclassTab, "")


        self.individualTab = QtWidgets.QWidget()
        self.individualTab.setObjectName("individualTab")

        self.individualLayout = QtWidgets.QGridLayout(self.individualTab)
        self.individualLayout.setObjectName("individualLayout")

        self.individualTable = QtWidgets.QTableWidget(self.individualTab)
        self.individualTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.individualTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.individualTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.individualTable.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.individualTable.setCornerButtonEnabled(True)
        self.individualTable.setObjectName("individualTable")
        self.individualTable.setColumnCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.individualTable.setHorizontalHeaderItem(0, item)
        self.individualTable.horizontalHeader().setStretchLastSection(True)
        self.individualTable.verticalHeader().setStretchLastSection(False)
        self.individualTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.individualTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.individualLayout.addWidget(self.individualTable, 0, 0, 1, 1)

        self.tabWidget.addTab(self.individualTab, "")


        self.objectPropertyTab = QtWidgets.QWidget()
        self.objectPropertyTab.setObjectName("objectPropertyTab")

        self.objectPropertyLayout = QtWidgets.QGridLayout(self.objectPropertyTab)
        self.objectPropertyLayout.setObjectName("objectPropertyLayout")

        self.objectPropertyTable = QtWidgets.QTableWidget(self.objectPropertyTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.objectPropertyTable.sizePolicy().hasHeightForWidth())
        self.objectPropertyTable.setSizePolicy(sizePolicy)
        self.objectPropertyTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.objectPropertyTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.objectPropertyTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.objectPropertyTable.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.objectPropertyTable.setCornerButtonEnabled(True)
        self.objectPropertyTable.setObjectName("objectPropertyTable")
        self.objectPropertyTable.setColumnCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.objectPropertyTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.objectPropertyTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.objectPropertyTable.setHorizontalHeaderItem(2, item)
        self.objectPropertyTable.horizontalHeader().setCascadingSectionResizes(False)
        self.objectPropertyTable.horizontalHeader().setStretchLastSection(True)
        self.objectPropertyTable.verticalHeader().setCascadingSectionResizes(False)
        self.objectPropertyTable.verticalHeader().setStretchLastSection(False)
        self.objectPropertyTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.objectPropertyTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.objectPropertyLayout.addWidget(self.objectPropertyTable, 0, 0, 1, 1)

        self.tabWidget.addTab(self.objectPropertyTab, "")


        self.dataPropertyTab = QtWidgets.QWidget()
        self.dataPropertyTab.setObjectName("dataPropertyTab")

        self.dataPropertyLayout = QtWidgets.QGridLayout(self.dataPropertyTab)
        self.dataPropertyLayout.setObjectName("dataPropertyLayout")

        self.dataPropertyTable = QtWidgets.QTableWidget(self.dataPropertyTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dataPropertyTable.sizePolicy().hasHeightForWidth())
        self.dataPropertyTable.setSizePolicy(sizePolicy)
        self.dataPropertyTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.dataPropertyTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.dataPropertyTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.dataPropertyTable.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.dataPropertyTable.setCornerButtonEnabled(True)
        self.dataPropertyTable.setObjectName("dataPropertyTable")
        self.dataPropertyTable.setColumnCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.dataPropertyTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.dataPropertyTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.dataPropertyTable.setHorizontalHeaderItem(2, item)
        self.dataPropertyTable.horizontalHeader().setCascadingSectionResizes(False)
        self.dataPropertyTable.horizontalHeader().setStretchLastSection(True)
        self.dataPropertyTable.verticalHeader().setCascadingSectionResizes(False)
        self.dataPropertyTable.verticalHeader().setStretchLastSection(False)
        self.dataPropertyTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.dataPropertyTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.dataPropertyLayout.addWidget(self.dataPropertyTable, 0, 0, 1, 1)

        self.tabWidget.addTab(self.dataPropertyTab, "")


        self.queryTab = QtWidgets.QWidget()
        self.queryTab.setObjectName("queryTab")

        self.queryLayout = QtWidgets.QGridLayout(self.queryTab)
        self.queryLayout.setObjectName("queryLayout")

        self.queryEdit = QtWidgets.QTextEdit(self.queryTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.queryEdit.sizePolicy().hasHeightForWidth())
        self.queryEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.queryEdit.setFont(font)
        self.queryEdit.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.queryEdit.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.queryEdit.setDocumentTitle("")
        self.queryEdit.setCursorWidth(1)
        self.queryEdit.setObjectName("queryEdit")
        self.queryLayout.addWidget(self.queryEdit, 2, 0, 1, 3)

        self.executeButton = QtWidgets.QPushButton(self.queryTab)
        self.executeButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.executeButton.setObjectName("executeButton")
        self.queryLayout.addWidget(self.executeButton, 3, 0, 1, 1)

        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.queryLayout.addItem(spacerItem2, 3, 1, 1, 2)

        self.queryTable = QtWidgets.QTableWidget(self.queryTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.queryTable.sizePolicy().hasHeightForWidth())
        self.queryTable.setSizePolicy(sizePolicy)
        self.queryTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.queryTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.queryTable.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.queryTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.queryTable.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.queryTable.setCornerButtonEnabled(True)
        self.queryTable.setObjectName("queryTable")
        self.queryTable.setColumnCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.queryTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.queryTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.queryTable.setHorizontalHeaderItem(2, item)
        self.queryTable.horizontalHeader().setCascadingSectionResizes(False)
        self.queryTable.verticalHeader().setCascadingSectionResizes(False)
        self.queryTable.verticalHeader().setStretchLastSection(False)
        self.queryTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.queryTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.queryLayout.addWidget(self.queryTable, 1, 0, 1, 3)


        self.tabWidget.addTab(self.queryTab, "")

        self.gridLayout.addWidget(self.tabWidget, 4, 0, 1, 4)


        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem3, 2, 2, 1, 2)

        self.deleteButton = QtWidgets.QPushButton(self.centralwidget)
        self.deleteButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.deleteButton.setObjectName("deleteButton")
        self.gridLayout.addWidget(self.deleteButton, 0, 1, 1, 1)

        self.propertyButton = QtWidgets.QPushButton(self.centralwidget)
        self.propertyButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.propertyButton.setObjectName("propertyButton")
        self.gridLayout.addWidget(self.propertyButton, 1, 0, 1, 1)

        self.describeButton = QtWidgets.QPushButton(self.centralwidget)
        self.describeButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.describeButton.setObjectName("describeButton")
        self.gridLayout.addWidget(self.describeButton, 1, 1, 1, 1)

        self.removeForIndividualButton = QtWidgets.QPushButton(self.centralwidget)
        self.removeForIndividualButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.removeForIndividualButton.setObjectName("removeForIndividualButton")
        self.gridLayout.addWidget(self.removeForIndividualButton, 1, 0, 1, 1)

        self.loadOntologyButton = QtWidgets.QPushButton(self.centralwidget)
        self.loadOntologyButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.loadOntologyButton.setObjectName("loadOntologyButton")
        self.gridLayout.addWidget(self.loadOntologyButton, 5, 1, 1, 1)

        self.deleteEverythingButton = QtWidgets.QPushButton(self.centralwidget)
        self.deleteEverythingButton.setStyleSheet("background-color: rgb(175, 226, 255);")
        self.deleteEverythingButton.setObjectName("deleteEverythingButton")
        self.gridLayout.addWidget(self.deleteEverythingButton, 5, 2, 1, 1)

        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.connect_all()

        self.tabWidget.setCurrentIndex(0)
        self.tab_changed()

    def prepare_class_tab(self):
        self.createButton.setVisible(True)
        self.createButton.setEnabled(True)

        self.deleteButton.setVisible(True)
        self.deleteButton.setEnabled(True)

        self.propertyButton.setEnabled(False)
        self.propertyButton.setVisible(False)

        self.describeButton.setEnabled(False)
        self.describeButton.setVisible(False)

        self.removeForIndividualButton.setEnabled(False)
        self.removeForIndividualButton.setVisible(False)

    def prepare_subclass_tab(self):
        self.createButton.setVisible(True)
        self.createButton.setEnabled(True)

        self.deleteButton.setVisible(False)
        self.deleteButton.setEnabled(False)

        self.propertyButton.setEnabled(False)
        self.propertyButton.setVisible(False)

        self.describeButton.setEnabled(False)
        self.describeButton.setVisible(False)

        self.removeForIndividualButton.setEnabled(False)
        self.removeForIndividualButton.setVisible(False)

    def prepare_individual_tab(self):
        self.createButton.setVisible(True)
        self.createButton.setEnabled(True)

        self.deleteButton.setVisible(True)
        self.deleteButton.setEnabled(True)

        self.propertyButton.setEnabled(True)
        self.propertyButton.setVisible(True)

        self.describeButton.setEnabled(True)
        self.describeButton.setVisible(True)

        self.removeForIndividualButton.setEnabled(False)
        self.removeForIndividualButton.setVisible(False)

    def prepare_object_property_tab(self):
        self.createButton.setVisible(True)
        self.createButton.setEnabled(True)

        self.deleteButton.setVisible(True)
        self.deleteButton.setEnabled(True)

        self.propertyButton.setEnabled(False)
        self.propertyButton.setVisible(False)

        self.describeButton.setEnabled(False)
        self.describeButton.setVisible(False)

        self.removeForIndividualButton.setEnabled(True)
        self.removeForIndividualButton.setVisible(True)

    def prepare_data_property_tab(self):
        self.createButton.setVisible(True)
        self.createButton.setEnabled(True)

        self.deleteButton.setVisible(True)
        self.deleteButton.setEnabled(True)

        self.propertyButton.setEnabled(False)
        self.propertyButton.setVisible(False)

        self.describeButton.setEnabled(False)
        self.describeButton.setVisible(False)

        self.removeForIndividualButton.setEnabled(True)
        self.removeForIndividualButton.setVisible(True)

    def prepare_query_tab(self):
        self.createButton.setVisible(False)
        self.createButton.setEnabled(False)

        self.deleteButton.setVisible(False)
        self.deleteButton.setEnabled(False)

        self.propertyButton.setEnabled(False)
        self.propertyButton.setVisible(False)

        self.describeButton.setEnabled(False)
        self.describeButton.setVisible(False)

        self.removeForIndividualButton.setEnabled(False)
        self.removeForIndividualButton.setVisible(False)

    def tab_changed(self):
        if self.tabWidget.currentIndex() == 0:
            self.prepare_class_tab()
        elif self.tabWidget.currentIndex() == 1:
            self.prepare_subclass_tab()
        elif self.tabWidget.currentIndex() == 2:
            self.prepare_individual_tab()
        elif self.tabWidget.currentIndex() == 3:
            self.prepare_object_property_tab()
        elif self.tabWidget.currentIndex() == 4:
            self.prepare_data_property_tab()
        elif self.tabWidget.currentIndex() == 5:
            self.prepare_query_tab()

    # def refresh_tables(self):
    #     for i in range(self.tabWidget.count()):
    #         if i == 5:
    #             continue
    #         data = self.update_data(i.tab)
    #         if not data:
    #             data = ''
    #         sheet = Sheet(
    #             i.tab,
    #             data=data,
    #             height=700,
    #             width=1020,
    #             default_column_width=300
    #         )
    #         sheet.enable_bindings()
    #         sheet.extra_bindings("begin_edit_cell", self.begin_edit_cell)
    #         if i == 2:
    #             span = sheet.span(key=self.just_tabs[i.tab], header=True)
    #             sheet.readonly(span)
    #         sheet.edit_validation(self.validate_edits)
    #         sheet.grid(row=0, column=1, sticky="nswe")
    #         sheet.headers(i.tab_name)
    #         self.update_tab_sheet(i.tab, sheet)

    def load_ontology_clicked(self):
        filename, ok = QtWidgets.QFileDialog.getOpenFileName(
            MainWindow,
            "импортировать файл",
            "/home/yackub",
            "Text files (*.owl *.rdf)",
        )
        if filename:
            write_file(filename)
            self.refresh_tables()

    def connect_all(self):
        self.tabWidget.currentChanged.connect(self.tab_changed)
        self.loadOntologyButton.clicked.connect(self.load_ontology_clicked)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Azer"))
        self.createButton.setText(_translate("MainWindow", "Create"))

        item = self.classTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Class"))
        __sortingEnabled = self.classTable.isSortingEnabled()
        self.classTable.setSortingEnabled(False)
        self.classTable.setSortingEnabled(__sortingEnabled)

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.classTab), _translate("MainWindow", "Class"))


        item = self.subclassTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Class"))
        item = self.subclassTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Subclass"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.subclassTab), _translate("MainWindow", "Subclass"))


        item = self.individualTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Individual"))
        __sortingEnabled = self.individualTable.isSortingEnabled()
        self.individualTable.setSortingEnabled(False)
        self.individualTable.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.individualTab), _translate("MainWindow", "Individual"))


        item = self.objectPropertyTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Object property"))
        item = self.objectPropertyTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Domain"))
        item = self.objectPropertyTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Range"))
        __sortingEnabled = self.objectPropertyTable.isSortingEnabled()
        self.objectPropertyTable.setSortingEnabled(False)
        self.objectPropertyTable.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.objectPropertyTab), _translate("MainWindow", "Object property"))


        item = self.dataPropertyTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Data property"))
        item = self.dataPropertyTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Domain"))
        item = self.dataPropertyTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Range"))
        __sortingEnabled = self.dataPropertyTable.isSortingEnabled()
        self.dataPropertyTable.setSortingEnabled(False)
        self.dataPropertyTable.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.dataPropertyTab), _translate("MainWindow", "Data property"))


        self.queryEdit.setPlaceholderText(_translate("MainWindow", "Input your SPARQL query..."))
        self.executeButton.setText(_translate("MainWindow", "Execute"))

        item = self.queryTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Object property"))
        item = self.queryTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Domain"))
        item = self.queryTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Range"))
        __sortingEnabled = self.queryTable.isSortingEnabled()
        self.queryTable.setSortingEnabled(False)
        self.queryTable.setSortingEnabled(__sortingEnabled)


        self.tabWidget.setTabText(self.tabWidget.indexOf(self.queryTab), _translate("MainWindow", "Query"))

        self.deleteButton.setText(_translate("MainWindow", "Delete"))

        self.propertyButton.setText(_translate("MainWindow", "Property"))

        self.describeButton.setText(_translate("MainWindow", "Describe"))

        self.removeForIndividualButton.setText(_translate("MainWindow", "Remove for individual"))

        self.loadOntologyButton.setText(_translate("MainWindow", "Load ontology"))

        self.deleteEverythingButton.setText(_translate("MainWindow", "Delete everything"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
